package com.relecotech.androidsparsh;

import android.graphics.Color;
import android.location.Location;
import android.location.LocationListener;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.MenuItem;
import android.view.View;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.SettableFuture;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.util.ArrayList;
import java.util.HashMap;

public class MapsActivity extends AppCompatActivity implements OnMapReadyCallback, LocationListener {

    private GoogleMap mMap;
    private double lat1, lat2, lon1, lon2;
    private JsonObject trackingDataItem;
    private JsonArray getJsonTrackResponse;
    private String busId;
    private String date_Time;
    private String bus_lati;
    private String bus_longi;
    private ArrayList<LatLng> points;
    private Polyline line;
    private LatLng latLng;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);

        points = new ArrayList<LatLng>();

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("Bus Tracker");

        lat1 = 21.1681975;
        lat2 = 21.131806;
        lon1 = 79.0682461;
        lon2 = 79.098861;

        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    private class GetDataFromServer extends AsyncTask<String, String, String> {

        @Override
        protected String doInBackground(String... la) {

            try {
                getTrackingData();
            } catch (Exception e) {
                System.out.println("error" + e.toString());
            }

            return "call";
        }
    }

    private void getTrackingData() {
        trackingDataItem = new JsonObject();

        trackingDataItem.addProperty("BusId", "B1");

        final SettableFuture<JsonElement> resultFuture = SettableFuture.create();
        ListenableFuture<JsonElement> serviceFilterFuture = MainActivity.mClient.invokeApi("getTrackingData", trackingDataItem);

        Futures.addCallback(serviceFilterFuture, new FutureCallback<JsonElement>() {
            @Override
            public void onFailure(Throwable exception) {
                resultFuture.setException(exception);
                System.out.println(" addTrackingData exception    " + exception);
            }

            @Override
            public void onSuccess(JsonElement response) {
                resultFuture.set(response);
                System.out.println(" addTrackingData  response    " + response);
                parseJSONAndPopulate(response);

            }
        });
    }

    private void parseJSONAndPopulate(JsonElement busTrackerResponse) {

        getJsonTrackResponse = busTrackerResponse.getAsJsonArray();

        if (getJsonTrackResponse.size() == 0) {

        } else {

            System.out.println("getJsonListResponse.size()" + getJsonTrackResponse.size());
            for (int loop = 0; loop < getJsonTrackResponse.size(); loop++) {

                JsonObject jsonObjectForIteration = getJsonTrackResponse.get(loop).getAsJsonObject();

                date_Time = jsonObjectForIteration.get("dateTime").toString().replace("\"", "");
                bus_lati = jsonObjectForIteration.get("latitude").toString().replace("\"", "");
                bus_longi = jsonObjectForIteration.get("longitude").toString().replace("\"", "");
                busId = jsonObjectForIteration.get("bus_id").toString().replace("\"", "");
                latLng = new LatLng(Double.parseDouble(bus_lati), Double.parseDouble(bus_longi));
                redrawLine();
//                direction = jsonObjectForIteration.get("direction").toString().replace("\"", "");
            }
        }
    }

    private void redrawLine() {

        mMap.clear();  //clears all Markers and Polylines

        PolylineOptions options = new PolylineOptions().width(5).color(Color.BLUE).geodesic(true);
//        for (int i = 0; i < points.size(); i++) {
//            LatLng point = points.get(i);
//            options.add(point);
//        }
//        LatLng point = points.add();
        options.add(new LatLng(lat2, lon2));
        options.add(new LatLng(21.136429, 79.102485));
        options.add(new LatLng(21.137400, 79.108289));
        options.add(new LatLng(21.138343, 79.116668));
//        options.add(new LatLng(lat1, lon1));
        addMarker(new LatLng(21.137400, 79.108289));
//        addMarker(); //add Marker in current position
        line = mMap.addPolyline(options); //add Polyline
    }

    // Adding marker on the GoogleMaps
    private void addMarker(LatLng latlng) {
//        MarkerOptions markerOptions = new MarkerOptions();
        mMap.addMarker(new MarkerOptions().position(latlng).title(busId).icon(BitmapDescriptorFactory.fromResource(R.drawable.bus4)));
        LatLng cps = new LatLng(21.138343, 79.116668);
        mMap.addMarker(new MarkerOptions().position(cps).title("Tejaswini Vidya Mandir Convent").icon(BitmapDescriptorFactory.fromResource(R.drawable.school1)));
        LatLng home = new LatLng(lat2, lon2);
        mMap.addMarker(new MarkerOptions().position(home).title("Home").icon(BitmapDescriptorFactory.fromResource(R.drawable.home_pin1)));
        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latlng, 13.0f));
        points.add(latLng);
    }


    @Override
    public void onLocationChanged(Location location) {

        //TextView tvLocation = (TextView) findViewById(R.id.tv_location);

        // Getting latitude of the current location
        double latitude = location.getLatitude();
        double longitude = location.getLongitude();

        // Creating a LatLng object for the current location
        LatLng latLng = new LatLng(latitude, longitude);

        // Showing the current location in Google Map
        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));

        // Zoom in the Google Map
        //mMap.animateCamera(CameraUpdateFactory.zoomTo(17));

        // Setting latitude and longitude in the TextView tv_location
        //tvLocation.setText("Latitude:" +  latitude  + ", Longitude:"+ longitude );

    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {

    }

    @Override
    public void onProviderEnabled(String provider) {

    }

    @Override
    public void onProviderDisabled(String provider) {

    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;


//        LatLng cps = new LatLng(lat1, lon1);
//        mMap.addMarker(new MarkerOptions().position(cps).title("Centre Point School").icon(BitmapDescriptorFactory.fromResource(R.drawable.school1)));
//        mMap.moveCamera(CameraUpdateFactory.newLatLng(cps));

//        LatLng bus = new LatLng(Double.parseDouble(bus_lati),Double.parseDouble(bus_longi));
//        mMap.addMarker(new MarkerOptions().position(bus).title(busId));

//        LatLng home = new LatLng(lat2, lon2);
//        mMap.addMarker(new MarkerOptions().position(home).title("Home").icon(BitmapDescriptorFactory.fromResource(R.drawable.home_pin1)));

        // Sets the map type to be "hybrid"
//        mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
        mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
        //mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
        mMap.getCameraPosition();
        //mMap.animateCamera(CameraUpdateFactory.zoomTo(17));

        getDistance();
        double scale = Math.sqrt(getDistance());
        System.out.print("scale : " + scale);
        System.out.print("getDistance(); : " + getDistance());

//        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(21.1434721, 79.0807003), 13.0f));

        new GetDataFromServer().execute();

    }

//    public void getDistance() {
//        lat1 = 22.1827593;
//        lat2 = 21.131806;
//        lon1 = 78.4693766;
//        lon2 = 79.098861;
//
//        difLat = lat2 - lat1;
//        difLon = lon2 - lon1;
//        sqrDifLat = (difLat * difLat);
//        sqrDifLon = (difLon * difLon);
//        Math.sqrt(sqrDifLat * sqrDifLon);
//        System.out.println(" DIF IN VALUE OF TWO " + Math.sqrt(sqrDifLat + sqrDifLon));
//
//        System.out.println("distance(lat1, lon1, lat2, lon2, \"K\")" + distance(lat1, lon1, lat2, lon2, "K"));
//    }

    private double getDistance() {
        String unit = "K";
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        if (unit.equals("K")) {
            dist = dist * 1.609344;
        }
        return (dist);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    /*::	This function converts decimal degrees to radians						 :*/
    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private static double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    /*::	This function converts radians to decimal degrees						 :*/
    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private static double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // handle arrow click here
        if (item.getItemId() == android.R.id.home) {
            finish();
        }
        return super.onOptionsItemSelected(item);
    }
}
